commit ec605c9d6b7f1f50492bebd202e1a25367834653
Author: Tobias S. Josefowitz <tobij@tobij.de>
Date:   Tue Jan 14 21:28:52 2014 +0100

    [ia32] At least gentoo provides a REG_* enum, in sys/ucontext.h
    
    Thus, move to using a more unique naming scheme - P_REG_* etc.

diff --git a/src/code/ia32.c b/src/code/ia32.c
index df04781..52efcae 100644
--- a/src/code/ia32.c
+++ b/src/code/ia32.c
@@ -14,14 +14,10 @@
 #include "object.h"
 #include "builtin_functions.h"
 
-/* This is defined on windows */
-#ifdef REG_NONE
-#undef REG_NONE
-#endif
-
-enum ia32_reg {REG_EAX = 0, REG_EBX = 3, REG_ECX = 1, REG_EDX = 2, REG_NONE = 4};
+enum ia32_reg {P_REG_EAX = 0, P_REG_EBX = 3, P_REG_ECX = 1, P_REG_EDX = 2,
+               P_REG_NONE = 4 };
 
-#define REG_BITMASK ((1 << REG_NONE) - 1)
+#define REG_BITMASK ((1 << P_REG_NONE) - 1)
 
 /* #define REGISTER_DEBUG */
 
@@ -71,7 +67,7 @@ static int alloc_regs = 0, valid_regs = 0;
 #define MOV_ABSADDR_TO_REG(ADDR, REG) do {				\
     MAKE_VALID_REG (REG);						\
     /* movl addr,%reg */						\
-    if ((REG) == REG_EAX)						\
+    if ((REG) == P_REG_EAX)						\
       add_to_program (0xa1); /* Move dword at address to EAX. */	\
     else {								\
       add_to_program (0x8b); /* Move r/m32 to r32. */			\
@@ -83,7 +79,7 @@ static int alloc_regs = 0, valid_regs = 0;
 #define MOV_REG_TO_ABSADDR(REG, ADDR) do {				\
     CHECK_VALID_REG (REG);						\
     /* movl %reg,addr */						\
-    if ((REG) == REG_EAX)						\
+    if ((REG) == P_REG_EAX)						\
       add_to_program (0xa3); /* Move EAX to dword at address. */	\
     else {								\
       add_to_program (0x89); /* Move r32 to r/m32. */			\
@@ -217,7 +213,7 @@ static int alloc_regs = 0, valid_regs = 0;
       add_to_program (0x48 | (REG)); /* Decrement r32. */		\
     else if (val_ < -128 || val_ > 127) {				\
       /* addl $val,%reg */						\
-      if ((REG) == REG_EAX)						\
+      if ((REG) == P_REG_EAX)						\
 	add_to_program (0x05); /* Add imm32 to EAX. */			\
       else {								\
 	add_to_program (0x81); /* Add imm32 to r/m32. */		\
@@ -334,8 +330,8 @@ ptrdiff_t ia32_prev_stored_pc; /* PROG_PC at the last point Pike_fp->pc was upda
 
 void ia32_flush_code_generator(void)
 {
-  next_reg = REG_EAX;
-  sp_reg = fp_reg = mark_sp_reg = REG_NONE;
+  next_reg = P_REG_EAX;
+  sp_reg = fp_reg = mark_sp_reg = P_REG_NONE;
   CLEAR_REGS();
   ia32_prev_stored_pc = -1;
 }
@@ -351,7 +347,7 @@ static enum ia32_reg alloc_reg (int avoid_regs)
     /* There's a free register. */
 
     for (reg = next_reg; (1 << reg) & used_regs;) {
-      reg = (reg + 1) % REG_NONE;
+      reg = (reg + 1) % P_REG_NONE;
 #ifdef PIKE_DEBUG
       if (reg == next_reg) Pike_fatal ("Failed to find a free register.\n");
 #endif
@@ -364,15 +360,15 @@ static enum ia32_reg alloc_reg (int avoid_regs)
      * probably be replaced with an LRU strategy. */
 
     for (reg = next_reg; (1 << reg) & avoid_regs;) {
-      reg = (reg + 1) % REG_NONE;
+      reg = (reg + 1) % P_REG_NONE;
 #ifdef PIKE_DEBUG
       if (reg == next_reg) Pike_fatal ("Failed to find a non-excluded register.\n");
 #endif
     }
 
-    if (sp_reg == reg)			{sp_reg = REG_NONE; DEALLOC_REG (reg);}
-    else if (fp_reg == reg)		{fp_reg = REG_NONE; DEALLOC_REG (reg);}
-    else if (mark_sp_reg == reg)	{mark_sp_reg = REG_NONE; DEALLOC_REG (reg);}
+    if (sp_reg == reg)			{sp_reg = P_REG_NONE; DEALLOC_REG (reg);}
+    else if (fp_reg == reg)		{fp_reg = P_REG_NONE; DEALLOC_REG (reg);}
+    else if (mark_sp_reg == reg)	{mark_sp_reg = P_REG_NONE; DEALLOC_REG (reg);}
   }
 
 #ifdef REGISTER_DEBUG
@@ -386,11 +382,11 @@ static enum ia32_reg alloc_reg (int avoid_regs)
 #define DEF_LOAD_REG(REG, SET)						\
   static void PIKE_CONCAT(load_,REG) (int avoid_regs)			\
   {									\
-    if (REG == REG_NONE) {						\
+    if (REG == P_REG_NONE) {						\
       REG = alloc_reg (avoid_regs);					\
       /* Update the round robin pointer here so that we disregard */	\
       /* the direct calls to alloc_reg for temporary registers. */	\
-      next_reg = (REG + 1) % REG_NONE;					\
+      next_reg = (REG + 1) % P_REG_NONE;				\
       {SET;}								\
     }									\
     else								\
@@ -410,8 +406,8 @@ DEF_LOAD_REG (mark_sp_reg, {
 static void ia32_call_c_function(void *addr)
 {
   CALL_RELATIVE(addr);
-  next_reg = REG_EAX;
-  sp_reg = fp_reg = mark_sp_reg = REG_NONE;
+  next_reg = P_REG_EAX;
+  sp_reg = fp_reg = mark_sp_reg = P_REG_NONE;
   CLEAR_REGS();
 }
 
